{"version":3,"sources":["styles/images/marker-icon.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","markerIcon","require","App","H","window","fetch","then","clasterData","addMarkerToGroup","group","coordinate","html","marker","map","Marker","icon","Icon","size","pixelRatio","w","h","anchor","x","y","setData","addObject","_addInfoBubbles","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Group","addEventListener","evt","bubble","ui","InfoBubble","target","getPosition","content","getData","addBubble","in_progress","forEach","lat","lng","concat","name","zone","stop","apply","this","arguments","platform","service","Platform","app_id","app_code","useHTTPS","devicePixelRatio","defaultLayers","createDefaultLayers","tileSize","ppi","undefined","Map","document","getElementById","normal","center","geo","Point","zoom","mapevents","Behavior","MapEvents","disable","WHEELZOOM","UI","createDefault","_x","_x2","addInfoBubbles","react_default","createElement","className","Navbar","color","Container","Row","Col","lg","xl","NavbarBrand","href","id","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e5c8e89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marker-icon.d839b2ad.svg\";","import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// import Root from \"./components/Root\";\n// import AuthRoot from \"./components/AuthRoot\";\n\nimport { Navbar, NavbarBrand, Container, Row, Col } from \"reactstrap\";\n\n// const clasterData = require(\"./airports.json\");\nconst markerIcon = require(\"./styles/images/marker-icon.svg\");\n\nclass App extends Component {\n  componentDidMount() {\n    const H = window.H;\n\n    fetch(\"https://digital.codedream.ru/set/home?hash=hv\").then(clasterData => {\n      /**\n       * Creates a new marker and adds it to a group\n       * @param {H.map.Group} group       The group holding the new marker\n       * @param {H.geo.Point} coordinate  The location of the marker\n       * @param {String} html             Data associated with the marker\n       */\n      function addMarkerToGroup(group, coordinate, html) {\n        var marker = new H.map.Marker(coordinate, {\n          icon: new H.map.Icon(markerIcon, {\n            size: pixelRatio !== 1 ? { w: 84, h: 104 } : { w: 21, h: 26 },\n            anchor: pixelRatio !== 1 ? { x: 40, y: 104 } : { x: 10, y: 26 }\n          })\n        });\n        // add custom data to the marker\n        marker.setData(html);\n        group.addObject(marker);\n      }\n\n      /**\n       * Add two markers showing the position of Liverpool and Manchester City football clubs.\n       * Clicking on a marker opens an infobubble which holds HTML content related to the marker.\n       * @param  {H.Map} map      A HERE Map instance within the application\n       */\n      async function addInfoBubbles(map, clasterData) {\n        var group = new H.map.Group();\n\n        map.addObject(group);\n\n        // add 'tap' event listener, that opens info bubble, to the group\n        group.addEventListener(\n          \"tap\",\n          function(evt) {\n            // event target is the marker itself, group is a parent event target\n            // for all objects that it contains\n            var bubble = new H.ui.InfoBubble(evt.target.getPosition(), {\n              // read custom data\n              content: evt.target.getData()\n            });\n            // show info bubble\n            ui.addBubble(bubble);\n          },\n          false\n        );\n\n        clasterData.in_progress.forEach(marker => {\n          // console.log(markerLocation);\n          addMarkerToGroup(\n            group,\n            { lat: marker.lat, lng: marker.lng },\n            `<div><strong>Объект:</strong><br>${marker.name}</div><div><strong>Зона:</strong><br>${\n              marker.zone\n            }</div><div class=\"bubble-content-actions\"><a href=\"/admin\" class=\"btn btn-primary\">Подробнее</a></div>`\n          );\n        });\n      }\n\n      /**\n       * Boilerplate map initialization code starts below:\n       */\n\n      //Step 1: initialize communication with the platform\n      var platform = new H.service.Platform({\n        app_id: \"kRD7cCyJqVw9zy5fUDO0\",\n        app_code: \"MlpWswVT009GfuP4GA5CWA\",\n        useHTTPS: true\n      });\n      var pixelRatio = window.devicePixelRatio || 1;\n      var defaultLayers = platform.createDefaultLayers({\n        tileSize: pixelRatio === 1 ? 256 : 512,\n        ppi: pixelRatio === 1 ? undefined : 320\n      });\n\n      //Step 2: initialize a map  - not specificing a location will give a whole world view.\n      var map = new H.Map(document.getElementById(\"map\"), defaultLayers.normal.map, {\n        center: new H.geo.Point(55.796289, 49.108795),\n        zoom: 13,\n        pixelRatio: pixelRatio\n      });\n\n      //Step 3: make the map interactive\n      // MapEvents enables the event system\n      // Behavior implements default interactions for pan/zoom (also on mobile touch environments)\n      const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n\n      behavior.disable(H.mapevents.Behavior.WHEELZOOM);\n\n      // Create the default UI components\n      const ui = H.ui.UI.createDefault(map, defaultLayers);\n\n      // Now use the map as required...\n      // moveMapToBerlin(map);\n      addInfoBubbles(map, clasterData);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"site-wrapper\">\n        <Navbar color=\"primary\" className=\"site-header\">\n          <Container>\n            <Row>\n              <Col lg=\"12\" xl=\"12\">\n                <NavbarBrand href=\"/\">DreamRoad</NavbarBrand>\n              </Col>\n            </Row>\n          </Container>\n        </Navbar>\n        <div className=\"site-content\">\n          <div id=\"map\" className=\"map-container\" />\n\n          <Container>\n            <Row>\n              <Col lg=\"12\" xl=\"12\">\n                <div className=\"stat-conteiner\">\n                  <h2>Статистика по региону:</h2>\n\n                  <Row>\n                    <Col lg=\"4\" xl=\"4\">\n                      <div className=\"stat-block success-status\">\n                        <h3>Всего работ выполнено</h3>\n\n                        <div className=\"stat-count\">36%</div>\n                      </div>\n                    </Col>\n                    <Col lg=\"4\" xl=\"4\">\n                      <div className=\"stat-block success-status\">\n                        <h3>Завершено работ за год</h3>\n\n                        <div className=\"stat-count\">1632</div>\n                      </div>\n                    </Col>\n                    <Col lg=\"4\" xl=\"4\">\n                      <div className=\"stat-block warn-status\">\n                        <h3>Внеплановых работ выполнено</h3>\n\n                        <div className=\"stat-count\">246</div>\n                      </div>\n                    </Col>\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n        <div className=\"site-footer\">\n          <Container>\n            <Row>\n              <Col lg=\"12\" xl=\"12\">\n                &copy; 2019 BigOwl\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}